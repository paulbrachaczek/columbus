@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}
  
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
$min: map-get($breakpoints, $name);
@return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
$next: breakpoint-next($name, $breakpoints);
@return if($next, breakpoint-min($next, $breakpoints) - .02px, null);
}

@mixin media-breakpoint($name, $breakpoints: $grid-breakpoints) {
$max: breakpoint-min($name, $breakpoints);
@if $max {
    @media (max-width: $max) {
    @content;
    }
} @else {
    @content;
}
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
@return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
$min: breakpoint-min($name, $breakpoints);
@if $min {
    @media (min-width: $min) {
    @content;
    }
} @else {
    @content;
}
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
$max: breakpoint-max($name, $breakpoints);
@if $max {
    @media (max-width: $max) {
    @content;
    }
} @else {
    @content;
}
}
  
@mixin transition($transition...) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
  }
  @mixin transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
  }
  @mixin transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
  }
  @mixin transition-timing-function($timing...) {
    -moz-transition-timing-function:    $timing;
    -o-transition-timing-function:      $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function:         $timing;
  }
  @mixin transition-delay($delay...) {
    -moz-transition-delay:    $delay;
    -o-transition-delay:      $delay;
    -webkit-transition-delay: $delay;
    transition-delay:         $delay;
  }
  
  @mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
      background-image: url($image);
      background-size: $width $height;
    }
  }
  
  @mixin transitionAll(){
    @include transition(all 0.3s linear 0s);
  }
  
  @function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
      @return $number / ($number * 0 + 1);
    }
  
    @return $number;
  }
  
  @function multiply-px($value1, $value2, $unit: px) {
    @return (strip-unit($value1) * strip-unit($value2)) + $unit;
  }
  
  // Browser Prefixes
  @mixin transform($transforms) {
    -webkit-transform: $transforms;
    -moz-transform: $transforms;
    -ms-transform: $transforms;
    transform: $transforms;
  }
  
  // Rotate
  @mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
  }
  
  // Scale
  @mixin scale($scale) {
    @include transform(scale($scale));
  }
  
  // Translate
  @mixin translate ($x, $y) {
    @include transform(translate($x, $y));
  }
  
  // Skew
  @mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
  }
  
  // Transform Origin
  @mixin transform-origin ($origin) {
    -webkit-transform-origin: $origin;
    -moz-transform-origin: $origin;
    -ms-transform-origin: $origin;
    transform-origin: $origin;
  }
  
  @function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
  }
  
  @function calculateEm($size, $base) {
    $emSize: $size / $base;
    @return $emSize * 1em;
  }
  
  @function calculateLine($size, $base) {
    $emSize: $size / $base;
    @return strip-unit($emSize);
  }
  
  @mixin margin-auto {
    margin: {
      left: auto;
      right: auto;
    }
  }
  
  @mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;
  
    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
  }
  
  @keyframes fade {
    0% {
      opacity: 0;
    }
  
    100% {
      opacity: 1;
    }
  }
  
  @keyframes fadeOut {
    0% {
      opacity: 1;
    }
  
    100% {
      opacity: 0;
    }
  }
  
  @keyframes spinner {
    to {
      transform: rotate(360deg);
    }
  }
  
  @keyframes spin {
    0% {
      width: calculateEm(10px, 16px);
      height: calculateEm(10px, 16px);;
      background: #1b60ab;
    }
    25% {
      width: calculateEm(20px, 16px);
      height: calculateEm(20px, 16px);
    }
    50% {
      width: calculateEm(10px, 16px);
      height: calculateEm(10px, 16px);
      border-radius: 50%;
      background: #97c00e;
    }
    75% {
      width: calculateEm(20px, 16px);
      height: calculateEm(20px, 16px);
    }
    100% {
      transform: rotate(359deg);
      background: #1b60ab;
      width: calculateEm(10px, 16px);
      height: calculateEm(10px, 16px);
    }
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
  }